graph = { '5': ['3', '7'], '3': ['2', '4'], '7': ['8'], '2': [], '4': ['8'], '8': [] }

# BFS Implementation
def bfs(visited, graph, node):
    queue = [node]
    visited.append(node)
    while queue:
        m = queue.pop(0)
        print(m, end=" ")
        for neighbor in graph[m]:
            if neighbor not in visited:
                visited.append(neighbor)
                queue.append(neighbor)

# DFS Implementation
def dfs(visited, graph, node):
    if node not in visited:
        print(node, end=" ")
        visited.add(node)
        for neighbor in graph[node]:
            dfs(visited, graph, neighbor)

# Driver Code
print("Following is the Breadth-First Search") 
bfs([], graph, '5')

print("\nFollowing is the Depth-First Search")
dfs(set(), graph, '5')
